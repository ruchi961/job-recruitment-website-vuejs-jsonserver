{"remainingRequest":"D:\\classroom\\ruiajobrecruitment\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\classroom\\ruiajobrecruitment\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\classroom\\ruiajobrecruitment\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\classroom\\ruiajobrecruitment\\src\\components\\blog.vue?vue&type=template&id=aa64529c&","dependencies":[{"path":"D:\\classroom\\ruiajobrecruitment\\src\\components\\blog.vue","mtime":1602077216819},{"path":"D:\\classroom\\ruiajobrecruitment\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1601644602210},{"path":"D:\\classroom\\ruiajobrecruitment\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1601648466344},{"path":"D:\\classroom\\ruiajobrecruitment\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1601644602210},{"path":"D:\\classroom\\ruiajobrecruitment\\node_modules\\vue-loader\\lib\\index.js","mtime":1601648463674}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF92bS5fbSgwKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBhdHRyczogeyBpZDogIm1haW4iIH0gfSwgWwogICAgICBfYygKICAgICAgICAiaDEiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICJ0ZXh0LWFsaWduIjogImNlbnRlciIsCiAgICAgICAgICAgICJmb250LXNpemUiOiAiMzNweCIsCiAgICAgICAgICAgICJmb250LWZhbWlseSI6ICJBcmlhbCIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIiBIZWxwZnVsIEJsb2cgZm9yIHJlY3J1aXRlcnMgYW5kIGVtcGxveWVlcy4gIildCiAgICAgICksCiAgICAgIF9jKCJiciIpLAogICAgICBfYygKICAgICAgICAiaDIiLAogICAgICAgIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiwgImZvbnQtZmFtaWx5IjogIlRpbWVzIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCIgVGlwcyBmb3IgRmluZGluZyBUb3AgVGFsZW50ICIpLAogICAgICAgICAgX2MoImkiLCBbX3ZtLl92KCItYmxvZyBieSB0ZWFtYWJsZSIpXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKCJiciIpLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMjBweCIsICJmb250LWZhbWlseSI6ICJBcmlhbCIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBFbXBsb3llZXMsIG9uIGF2ZXJhZ2UsIHN3aXRjaCBqb2JzIGV2ZXJ5IGZvdXIgdG8gZml2ZSB5ZWFycy4gWW91bmdlciB3b3JrZXJzIGNoYW5nZSBldmVyeSB0aHJlZSB5ZWFycy4gWW91IHdvdWxkIHRoaW5rIHRoaXMgdHlwZSBvZiBqb2IgaG9wcGluZyBpbiB0aGUgbWFya2V0IHdvdWxkIG1ha2UgaXQgZWFzaWVyIGZvciBjb21wYW5pZXMgdG8gcGljayB1cCB0b3AgdGFsZW50LiBIb3dldmVyLCBtYWtpbmcgYSBoaXJlIGFuZCBtYWtpbmcgYW4gb3V0c3RhbmRpbmcgaGlyZSBhcmUgdHdvIGRpZmZlcmVudCB0aGluZ3MsIGFuZCB0aGUgZGlmZmVyZW5jZSBjYW4gYWZmZWN0IHlvdXIgYm90dG9tIGxpbmUuIFNvLCBob3cgY2FuIGNvbXBhbmllcyBleGNlbCBhdCBmaW5kaW5nIHRvcCB0YWxlbnQgaW5zdGVhZCBvZiBtZXJlbHkgZmlsbGluZyBvcGVuIHBvc2l0aW9ucz8gR29uZSBhcmUgdGhlIGRheXMgb2YgcG9zdGluZyBhIHNpbmdsZSBhZCBvbiBhIHJlY3J1aXRpbmcgd2Vic2l0ZSBhbmQgaG9waW5nIHlvdeKAmWxsIGF0dHJhY3QgdGhhdCBuZXh0IHN1cGVyc3RhciBjYW5kaWRhdGUuIFdpdGggdG9kYXnigJlzIGNvbXBldGl0aXZlIGpvYiBtYXJrZXQsIHRoZSB0aW1lIGhhcyBjb21lIGZvciBlbXBsb3llcnMgdG8gZ2V0IG1vcmUgY3JlYXRpdmUgaW4gdGhlaXIgcmVjcnVpdGluZyBlZmZvcnRzIGFuZCBzZWVrIG91dCByZWNydWl0aW5nIHRpcHMgd2hlcmV2ZXIgdGhleSBjYW4uIE92ZXIgODAgcGVyY2VudCBvZiBoaXJpbmcgbWFuYWdlcnMgYW5kIGh1bWFuIHJlc291cmNlcyBwcm9mZXNzaW9uYWxzIHNheSBoaXJpbmcgdGFsZW50IGlzIHRoZWlyIHRvcCBjb25jZXJuLiBPcmdhbml6YXRpb25zIHNob3VsZCBjYXN0IGEgd2lkZSBuZXQgd2hlbiBzZWFyY2hpbmcgZm9yIHBvdGVudGlhbCBjYW5kaWRhdGVzLiBSZWNydWl0aW5nIG1hbmFnZXJzIHNob3VsZCB1bmRlcnN0YW5kIHdoYXTigJlzIGF0dHJhY3RpdmUgdG8gcG90ZW50aWFsIGVtcGxveWVlcy4gV2hhdCBtb3RpdmF0ZXMgdGhlbT8gV2hhdCBhdHRyYWN0cyB0aGVtPyBXaGF0IG1ha2VzIHlvdXIgb3JnYW5pemF0aW9uIHN0YW5kIG91dCB0byBjYW5kaWRhdGVzIGxvb2tpbmcgZm9yIHRoZWlyIG5leHQgcG9zaXRpb24/IFdoZXJlIGFyZSBjYW5kaWRhdGVzIGxvb2tpbmcgZm9yIHRoZWlyIG5leHQgam9iPyBCeSBleHBhbmRpbmcgeW91ciByZWNydWl0aW5nIG1ldGhvZHMsIGFuZCBiZWNvbWluZyBtb3JlIGNyZWF0aXZlIGluIHRoZSBwcm9jZXNzLCB5b3XigJlsbCBiZSBhYmxlIHRvIGF0dHJhY3QgdGhvc2Ugc3RlbGxhciBjYW5kaWRhdGVzIHRvIHlvdXIgY29tcGFueS4gTGV04oCZcyBsb29rIGF0IHRocmVlIHRpcHMgZm9yIGZpbmRpbmcgdG9wIHRhbGVudC4iCiAgICAgICAgICApLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNTdHlsZTogeyBib3JkZXI6ICIycHggc29saWQgZ3JlZW4iIH0gfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNTdHlsZTogeyAiZm9udC1zaXplIjogIjIycHgiLCAibWFyZ2luLWxlZnQiOiAiNDAlIiB9IH0sCiAgICAgICAgICAgICAgW19jKCJiIiwgW192bS5fdigiRGV2ZWxvcCBhIFRhbGVudCBTdHJhdGVneSIpXSldCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBZb3UgbmVlZCB0byBsb29rIGF0IHlvdXIgY3VycmVudCB0YWxlbnQgc3RyYXRlZ3kuIERvbuKAmXQgaGF2ZSBvbmU/IEl04oCZcyB0aW1lIHRvIGRldmVsb3AgeW91ciBvcmdhbml6YXRpb27igJlzIHBsYW4gZm9yIHRhbGVudCBhY3F1aXNpdGlvbi4gU3RhcnQgYnkgaWRlbnRpZnlpbmcgd2hhdCB5b3UgZXhwZWN0IGZyb20gZXZlcnkgcm9sZSBhbmQgcG9zaXRpb24gaW4geW91ciBvcmdhbml6YXRpb24sIGZyb20gdGhlIHRvcCBkb3duLiBXcml0ZSBhIGpvYiBkZXNjcmlwdGlvbiBmb3IgZWFjaCByb2xlLiBDcmVhdGUgaW5wdXRzIGFuZCBvdXRwdXRzLiBOb3Qgb25seSBkb2VzIHRoaXMgaGVscCB5b3UgZ2V0IGEgYmV0dGVyIGdyYXNwIG9uIHlvdXIgb3BlbiBwb3NpdGlvbnMsIGJ1dCBpdCBhbHNvIGVuYWJsZXMgeW91IHRvIHJlY3J1aXQgYW5kIGhpcmUgcGVvcGxlIHdobyBmaXQgd2l0aCB5b3VyIGNvbXBhbnkgYW5kIGZpdCB0aGUgam9iIGZvciB3aGljaCB0aGV54oCZcmUgaW50ZXJ2aWV3aW5nLiBXaGVuIHBlb3BsZSBhcmUgaGlyZWQgZm9yIHJvbGVzIHRoYXQgcGxheSB0byB0aGVpciBzdHJlbmd0aHMsIHRoZXkgYXJlIG1vcmUgZW5nYWdlZCwgZWZmaWNpZW50LCBhbmQgcHJvZHVjdGl2ZS4gVGhleSB0aHJpdmUgaW4gdGhlaXIgcG9zaXRpb25zIGFuZCBhcmUgc3VjY2Vzc2Z1bC4gVGhpcyBoZWxwcyB0aGUgY29tcGFueSBzdWNjZWVkIGFzIHdlbGwuIEhvd2V2ZXIsIGlmIHlvdSBkb27igJl0IGRlbHZlIGludG8gdGhlIHBvc2l0aW9uIGl0c2VsZiBhbmQgdW5kZXJzdGFuZCBpdHMgcm9sZSB3aXRoaW4gdGhlIGxhcmdlciBvcmdhbml6YXRpb24sIGhvdyBkbyB5b3Uga25vdyB3aG8gdG8gcmVjcnVpdCBmb3IgdGhhdCBwb3NpdGlvbj8gSnVzdCBoaXJpbmcgdG8gaGlyZSBpcyBub3QgYSBzdHJhdGVneS4gSXTigJlzIGEgcmVjaXBlIGZvciBkaXNhc3Rlci4gVGFrZSB0aGUgdGltZSB0byBjcmVhdGUgYSB0YWxlbnQgc3RyYXRlZ3kgYW5kIHdhdGNoIHlvdXIgY29tcGFueSB0aHJpdmUuICIKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY1N0eWxlOiB7IGJvcmRlcjogIjJweCBzb2xpZCBncmVlbiIgfSB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMjJweCIsICJtYXJnaW4tbGVmdCI6ICIzOCUiIH0gfSwKICAgICAgICAgICAgICBbX2MoImIiLCBbX3ZtLl92KCJJZGVudGlmeSBZb3VyIElkZWFsIEpvYiBDYW5kaWRhdGUiKV0pXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgT25jZSB5b3XigJl2ZSBkZXZlbG9wZWQgeW91ciB0YWxlbnQgc3RyYXRlZ3ksIGl04oCZcyB0aW1lIHRvIGlkZW50aWZ5IHRoZSBpZGVhbCBqb2IgY2FuZGlkYXRlLiBXaG8gd291bGQgYmUgYmVzdCBmb3IgdGhlIHJvbGUgZm9yIHdoaWNoIHlvdeKAmXJlIGhpcmluZz8gV2hhdCBhcmUgdGhlIHZhbHVlcyBhbmQgYXR0cmlidXRlcyBhIGNhbmRpZGF0ZSB3b3VsZCBuZWVkIHRvIHBvc3Nlc3M/IFdoYXQgc2tpbGxzIGFuZCBleHBlcmllbmNlcyBhcmUgcmVxdWlyZWQ/IEhvdyBzaG91bGQgdGhpcyBwZXJzb24gaGFuZGxlIGNvbXBsZXggY2hhbGxlbmdlcz8gSG93IHNob3VsZCB0aGlzIHBlcnNvbiBjb21tdW5pY2F0ZT8gT3IgbGVhZCBhIHRlYW0/IEdldCBzb21lIGZlZWRiYWNrIGZyb20gdGhlIGVtcGxveWVlcyBpbiB0aGUgZGl2aXNpb24gb3IgZGVwYXJ0bWVudCB3aGVyZSB0aGUgcm9sZSBpcyBhdmFpbGFibGUuIFdoYXQgYXJlIHRoZWlyIHRob3VnaHRzIG9uIGFuIGlkZWFsIGNhbmRpZGF0ZT8gRG8geW91IGN1cnJlbnRseSBoYXZlIGEgaGlnaC1wZXJmb3JtaW5nIGVtcGxveWVlIGluIHRoZSBzYW1lIG9yIGEgc2ltaWxhciBwb3NpdGlvbj8gV2hhdCBtYWtlcyB0aGF0IGVtcGxveWVlIHNvIGdyZWF0PyBXaGF0IHNraWxscyBhbmQgYXR0cmlidXRlcyBhbGxvdyB0aGF0IGVtcGxveWVlIHRvIGFjaGlldmUgc3VjY2VzcyBpbiB0aGF0IHJvbGU/IEpvdCBkb3duIHRob3NlIGF0dHJpYnV0ZXMgYW5kIGxldCB0aG9zZSBzZXJ2ZSBhcyBhIGJhcm9tZXRlciBmb3IgdGhlIHBvc2l0aW9uLiBUaGVuLCBmaW5kIHRoZSBjYW5kaWRhdGUgdG8gZml0IHRob3NlIGF0dHJpYnV0ZXMuIEFzayBwb2ludGVkIHF1ZXN0aW9ucyBpbiBpbnRlcnZpZXdzLiBHaXZlIHRoZSBjYW5kaWRhdGUgdGhlIGNoYW5jZSB0byB0ZWxsIHlvdSBhYm91dCBob3cgaGUgb3Igc2hlIGhhbmRsZWQgYSBiaWcgc3VjY2VzcyBvciBhIGJpZyBmYWlsdXJlLiBIb3cgZG9lcyB0aGF0IGNhbmRpZGF0ZSB3b3JrIHVuZGVyIHN0cmVzcz8gSG93IGRvZXMgaGUgb3Igc2hlIGhhbmRsZSBjaGFsbGVuZ2VzIG9yIGludGVycGVyc29uYWwgcmVsYXRpb25zaGlwcz8gUHJvdmlkZSBzY2VuYXJpb3MgYW5kIGxldCB5b3VyIGNhbmRpZGF0ZSByZXNwb25kLiBHZXQgdG8ga25vdyB5b3VyIGNhbmRpZGF0ZSBkdXJpbmcgdGhlIGludGVydmlldyBwcm9jZXNzLiBNYWtlIHN1cmUgdGhleSBmaXQgdGhlIHJvbGUgZm9yIHdoaWNoIHlvdXIgaW50ZXJ2aWV3aW5nLiBBIENhcmVlckJ1aWxkZXIgc3VydmV5IHN0YXRlZCB0aGF0IDQzIHBlcmNlbnQgb2YgdGhlIHJlc3BvbmRlbnRzIG1hZGUgYmFkIGhpcmVzIGJlY2F1c2Ugb2YgdGhlIHByZXNzdXJlIHRvIGhpcmUgc29tZW9uZSBxdWlja2x5LiBXaGV0aGVyIHRoZSB1cmdlbmN5IHdhcyBjYXVzZWQgYnkgb3RoZXIgZW1wbG95ZWVzIGxlYXZpbmcgb3IgY3VycmVudCBlbXBsb3llZXMgYmVpbmcgb3ZlcndvcmtlZCwgaGlyaW5nIGEgc29tZW9uZSB3aXRob3V0IHZldHRpbmcgdGhhdCBwZXJzb24gdG8gc2VlIGlmIGhlIG9yIHNoZSBpcyB0aGUgcmlnaHQgZml0IGlzbuKAmXQgZ29vZCBmb3IgdGhlIGNvbXBhbnnigJRvciB0aGF0IG5ldyBlbXBsb3llZS4gSWYgb3JnYW5pemF0aW9ucyBoaXJlIHdpdGhvdXQgdGFraW5nIHRoZSB0aW1lIHRvIGlkZW50aWZ5IHRoZSBpZGVhbCBqb2IgY2FuZGlkYXRlLCB0aGVuIHlvdSBtYXkgaGF2ZSBpbmFkdmVydGVudGx5IGNyZWF0ZWQgYSByZXZvbHZpbmcgZG9vciBpc3N1ZeKAlGVtcGxveWVlcyBsZWF2ZSBzaG9ydGx5IGFmdGVyIGJlaW5nIGhpcmVkLiBUaGlzIGlzbuKAmXQgYSBnb29kIGxvb2sgZm9yIHByb3NwZWN0aXZlIGVtcGxveWVlcy4gIgogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljU3R5bGU6IHsgYm9yZGVyOiAiMnB4IHNvbGlkIGdyZWVuIiB9IH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgIHsgc3RhdGljU3R5bGU6IHsgImZvbnQtc2l6ZSI6ICIyMnB4IiwgIm1hcmdpbi1sZWZ0IjogIjM4JSIgfSB9LAogICAgICAgICAgICAgIFtfYygiYiIsIFtfdm0uX3YoIkNyZWF0ZSBhIEdyZWF0IENhbmRpZGF0ZSBFeHBlcmllbmNlIildKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIEZyb20gdGhlIG1vbWVudCB0aGUgY2FuZGlkYXRlIHJldmlld3MgeW91ciBqb2IgcG9zdGluZywgdG8gd2hlbiB0aGV5IGNvbWUgaW4gZm9yIGFuIGludGVydmlldyBvciB0d28sIHRvIHdoZW4geW91IGZvbGxvdy11cCB3aXRoIHRoZW0sIGNyZWF0ZSBhbiBleHBlcmllbmNlLiBNYW55IHRvcCBoaXJpbmcgbWFuYWdlcnMgZW1waGFzaXplIHRoZSBpbXBvcnRhbmNlIG9mIGNyZWF0aW5nIGEgc3RlbGxhciBjYW5kaWRhdGUgZXhwZXJpZW5jZSAtIGFuZCBpdCBzdGFydHMgd2l0aCBwcmV0dHkgc2ltcGxlIHRoaW5ncy4gRm9yIGV4YW1wbGUsIGludHJvZHVjZSB0aGVtIHRvIHRoZSB0ZWFtIHRoZXkgbWlnaHQgd29yayB3aXRoLiBTaG93IHRoZW0gYXJvdW5kIHRoZSBvZmZpY2UuIExldCB0aGVtIHNlZSBob3cgeW91IG9wZXJhdGUgYW5kIGZ1bmN0aW9uLiBXaGVuIHlvdSBoYXZlIGEgcmVmZXJyZWQgY2FuZGlkYXRlIGNvbWUgaW4gZHVyaW5nIHRoZSByZWNydWl0aW5nIHByb2Nlc3MsIHBlcnNvbmFsaXplIHRoZSBpbnRlcnZpZXcuIEFja25vd2xlZGdlIHRoYXQgdGhleeKAmXJlIGEgcmVmZXJyYWwuIE9mZmVyIHRvcC1zaGVsZiBjdXN0b21lciBzZXJ2aWNlIHRvIHRoZW0uIEludm9sdmUgdGhlIGVtcGxveWVlIHdobyByZWZlcnJlZCB0aGVtIHRvIHRoZSBjb21wYW55LiBOb3QgYWxsIGNhbmRpZGF0ZXMsIG9yIGV2ZW4gcmVmZXJyZWQgY2FuZGlkYXRlcywgd2lsbCBnZXQgYW4gb2ZmZXIgZnJvbSB5b3VyIGNvbXBhbnkuIFdoZW4geW91IHJlamVjdCBhIGNhbmRpZGF0ZSwgZG8gc28gd2l0aCBhIHBlcnNvbmFsaXplZCBsZXR0ZXIgb3IgZW1haWwuIExldCB0aGVtIGtub3cgd2h5IHRoZXkgd2VyZW7igJl0IGhpcmVkLiBHaXZlIHRoZW0gc3VnZ2VzdGlvbnMgZm9yIGZ1dHVyZSByb2xlcywgYXQgeW91ciBjb21wYW55IG9yIG90aGVyIGNvbXBhbmllcy4gWW91IG5ldmVyIGtub3csIHlvdSBtYXkgaGF2ZSBhbiBvcHBvcnR1bml0eSB0byBoaXJlIHRoYXQgY2FuZGlkYXRlIGF0IGEgZnV0dXJlIGRhdGUuIFRvcCB0YWxlbnQgZG9lcyBleGlzdC4gSG93ZXZlciwgd2l0aCB0b2RheeKAmXMgaGlnaGx5IGNvbXBldGl0aXZlIG1hcmtldCwgaXTigJlzIGhhcmRlciB0byBmaW5kIHRoYW4gZXZlci4gVXNlIHRoZSB0aXBzIGFib3ZlIHRvIGJvb3N0IHlvdXIgcmVjcnVpdGluZyBwcmFjdGljZXMuIEJ5IHVzaW5nIGNyZWF0aXZlIGFuZCBpbm5vdmF0aXZlIHN0cmF0ZWdpZXMsIHlvdeKAmWxsIGZpbmQgaWRlYWwgY2FuZGlkYXRlcy4gQXMgYSBib251cywgeW914oCZbGwgaW1wcmVzcyB5b3VyIGN1cnJlbnQgZW1wbG95ZWVzIGFuZCBpbmNyZWFzZSB5b3VyIHJldGVudGlvbiBvZiBib3RoIGV4aXN0aW5nIGVtcGxveWVlcyBhbmQgbmV3IGVtcGxveWVlcyBhbG9uZyB0aGUgd2F5LiAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}